# After Each
snippet aft
	afterEach(function() { 
		${1} 
	}
# Any
snippet any
	jasmine.any(${1})
#	Before Each
snippet bef
	beforeEach(function() {
		${1}
	});
# Describe
snippet des
	describe('${1:description}', function () {
		${2}
	});${3}	
snippet notb
	expect(${1:target}).not.toBe(${2});
# Expect not to be defined
snippet notd
	expect(${1:target}).not.toBeDefined();
# Expect not to be falsy
snippet notf
	expect(${1:target}).not.toBeFalsy();
# Expect not to be null
snippet notn
	expect(${1:target}).not.toBeNull();
# Expect to be truthy
snippet nott
	expect(${1:target}).not.toBeTruthy();
# Expect not to contain
snippet notc
	expect(${1:target}).not.toContain(${2:value});
# Expect not to equal
snippet note
	expect(${1:target}).not.toEqual(${2:value});
# Expect not to match
snippet notm
	expect(${1:target}).not.toMatch(${2});
snippet eb
	expect(${1:target}).toBe(${2});
# Expect to be defined
snippet ed
	expect(${1:target}).toBeDefined();
# Expect to be falsy
snippet ef
	expect(${1:target}).toBeFalsy();
# Expect to be null
snippet en
	expect(${1:target}).toBeNull();
# Expect to be truthy
snippet et
	expect(${1:target}).toBeTruthy();
# Expect to contain
snippet ec
	expect(${1:target}).toContain(${2:value});
# Expect to equal
snippet ee
	expect(${1:target}).toEqual(${2:value});
# Expect to match
snippet em
	expect(${1:target}).toMatch(${2:pattern});
# Expect was called with
snippet escw
	expect(${1:target}).toHaveBeenCalledWith(${2:arguments});
# Expect was called
snippet esc
	expect(${1:target}).toHaveBeenCalled();
# Expect was not called with
snippet notscw
	expect(${1:target}).not.toHaveBeenCalledWith(${2:arguments});
# Expect was not called
snippet notsc
	expect(${1:target}).not.toHaveBeenCalled();
# Expect
snippet ex
	expect(${1:target});
# It
snippet it
	it('should ${1:description}', function () {
		${2}
	});
# Runs
snippet ru
	runs(function () {
		${1}
	});
# Spy on and call fake
snippet scf
	spyOn(${1:object}, "${2:method}").andCallFake(${3:function});
# Spy on and call through
snippet sct
	spyOn(${1:object}, "${2:method}").andCallThrough();
# Spy on and return
snippet sr
	spyOn(${1:object}, "${2:method}").andReturn(${3:arguments});
# Spy on and throw
snippet st
	spyOn(${1:object}, "${2:method}").andThrow(${3:exception});
# Spy on
snippet s
	spyOn(${1:object}, "${2:method}");
# Waits
snippet wa
	waits(${1});
